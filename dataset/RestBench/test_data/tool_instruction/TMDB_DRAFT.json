{
    "0": {
        "ID": 0,
        "tool_name": "GET_movie_movie_id_keywords",
        "description": "This API retrieves the keywords associated with a specific movie using its movie ID. The 'movie_id' is a required parameter to identify the movie. The response includes a list of keywords, each with an 'id' and 'name', that describe themes or elements related to the movie. If the movie ID is invalid or the movie does not exist, the API will return an error response with a status code and a message indicating that the resource could not be found. Ensure the movie ID is correct to successfully obtain the keywords.",
        "url": "http://api.themoviedb.org/3/movie/{movie_id}/keywords",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Could you look up the keywords for the movie with the ID 13579? I'm interested in seeing what themes are associated with it.",
            "url": "http://api.themoviedb.org/3/movie/13579/keywords",
            "Parameters": {}
        }
    },
    "1": {
        "ID": 1,
        "tool_name": "GET_tv_popular",
        "description": "The API provides a daily updated, paginated list of popular TV shows on TMDb. Each entry includes detailed information such as the show's name, first air date, popularity score, vote average, genre IDs, origin country, original language, and an overview. The response also contains metadata like total pages and total results, which are useful for navigating through the list. The 'page' parameter allows users to specify which page of results to retrieve, with a default value of 1. Additionally, the 'adult' field indicates whether the show is intended for adult audiences. This API is useful for discovering trending TV shows and analyzing their popularity and viewer ratings.",
        "url": "http://api.themoviedb.org/3/tv/popular",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "I'm interested in finding out which popular TV shows have the highest vote average. Can you provide details on those?",
            "url": "http://api.themoviedb.org/3/tv/popular",
            "Parameters": {}
        }
    },
    "2": {
        "ID": 2,
        "tool_name": "GET_person_person_id",
        "description": "This API retrieves detailed information about a person using their unique ID. The response includes fields such as 'adult' (boolean indicating if the person is marked as an adult), 'also_known_as' (list of alternative names, can be an empty list if none are available), 'biography' (textual biography, can be an empty string if not available), 'birthday' (date of birth, can be 'None' if not available), 'deathday' (date of death, if applicable, can be 'None'), 'gender' (numerical representation of gender: 0 for not specified, 1 for female, 2 for male), 'homepage' (URL of the person's homepage, can be 'None'), 'id' (unique identifier), 'imdb_id' (IMDB identifier), 'known_for_department' (primary field of work, e.g., Directing), 'name' (full name), 'place_of_birth' (birthplace, can be 'None'), 'popularity' (numerical popularity score), and 'profile_path' (URL path to the profile image, can be 'None'). The API supports the 'append_to_response' parameter, which allows additional related data to be included in the response. No parameters are required for a basic query. Example usage: querying the API with a person ID returns the detailed information about that person, including their biography, alternative names, and other personal details.",
        "url": "http://api.themoviedb.org/3/person/{person_id}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you tell me more about the person with ID 24680, especially if they have any alternative names or if their biography is missing?",
            "url": "http://api.themoviedb.org/3/person/24680",
            "Parameters": {}
        }
    },
    "3": {
        "ID": 3,
        "tool_name": "GET_movie_movie_id_reviews",
        "description": "This API retrieves user reviews for a specific movie using the movie ID included in the URL path as a required parameter. If the movie ID does not exist or is invalid, the API will return an error with a status code and message indicating that the resource could not be found. The API supports pagination of reviews through an optional 'page' parameter, which defaults to 1 if not specified. If the specified page has no reviews, the API will return an empty 'results' array, and 'total_pages' and 'total_results' will be 0. The 'page' field in the response always returns the current page number requested, even if there are no results. The 'total_pages' and 'total_results' fields indicate the total number of pages and reviews available for the movie.",
        "url": "http://api.themoviedb.org/3/movie/{movie_id}/reviews",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "Could you check if there are any reviews available for the movie with ID 11111 on page 10?",
            "url": "http://api.themoviedb.org/3/movie/11111/reviews",
            "Parameters": {
                "page": 10
            }
        }
    },
    "4": {
        "ID": 4,
        "tool_name": "GET_movie_movie_id_release_dates",
        "description": "This API retrieves the release dates and certifications for a movie using a valid movie ID. It provides details on various release types, such as Premiere, Theatrical (limited), Theatrical, Digital, Physical, and TV. The response includes release dates, certifications, country codes (iso_3166_1), language codes (iso_639_1), and additional notes. A valid movie ID is necessary for the API to function, and errors may occur if the ID is invalid or does not exist, with a status code 34 indicating resource not found.",
        "url": "http://api.themoviedb.org/3/movie/{movie_id}/release_dates",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Could you find out the release dates and certifications for the movie with ID 13579, especially if it had a re-release or special anniversary edition?",
            "url": "http://api.themoviedb.org/3/movie/13579/release_dates",
            "Parameters": {}
        }
    },
    "5": {
        "ID": 5,
        "tool_name": "GET_tv_tv_id_season_season_number_episode_episode_number_credits",
        "description": "This API retrieves detailed credits for a specific TV episode, requiring 'tv_id', 'season_number', and 'episode_number' as path parameters. The response is in JSON format and includes separate lists for 'cast', 'crew', and 'guest_stars'. Each entry provides details such as the person's name, role, popularity, and profile image. The 'profile_path' field may be null if the image is unavailable or if the resource itself cannot be found. The API may return error responses, such as a status code of 34, indicating that the requested resource could not be found. This tool is useful for applications or research that need to display or analyze detailed credits for TV episodes, with the ability to focus on specific categories like guest stars.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I'm curious about the credits for episode 7 of season 2 of the TV show with ID 98765. Are there any episodes where the 'profile_path' for cast or crew is consistently null?",
            "url": "http://api.themoviedb.org/3/tv/98765/season/2/episode/7/credits",
            "Parameters": {}
        }
    },
    "6": {
        "ID": 6,
        "tool_name": "GET_movie_movie_id_images",
        "description": "This API retrieves images associated with a specific movie, categorized into backdrops, posters, and logos. Each image includes metadata such as size, language, file path, and voting information. You can filter images by language using the 'include_image_language' parameter, which accepts a comma-separated list of language codes and allows for a fallback language option. The 'movie_id' is a required parameter to specify the movie. If a request fails, it may return an error message like 'The resource you requested could not be found' (status code 34).",
        "url": "http://api.themoviedb.org/3/movie/{movie_id}/images",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "include_image_language",
                "schema": {
                    "type": "string"
                },
                "description": "The inlcuded image language."
            }
        ],
        "example": {
            "User Query": "I'm curious about the images from the movie with ID 98765. Could you include images in Italian and check if there are any with high vote counts?",
            "url": "http://api.themoviedb.org/3/movie/98765/images",
            "Parameters": {
                "include_image_language": "it,null"
            }
        }
    },
    "7": {
        "ID": 7,
        "tool_name": "GET_search_tv",
        "description": "This API allows you to search for TV shows by providing a non-empty, URI-encoded text query. The 'query' parameter is mandatory and must be properly formatted for the API to return results. The API response includes a list of TV shows that match the search criteria, providing details such as the show's name, original name, overview, popularity, genre IDs, origin country, original language, first air date, vote average, and vote count. Additionally, the response includes metadata like the total number of pages and total results, which is useful for pagination. Optional parameters include 'include_adult', which defaults to excluding adult content unless set to include it, and 'first_air_date_year', which filters results by the year of the first air date.",
        "url": "http://api.themoviedb.org/3/search/tv",
        "required_parameters": [
            {
                "name": "query",
                "schema": {
                    "type": "string"
                },
                "description": "Pass a text query to search. This value should be URI encoded."
            }
        ],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            },
            {
                "name": "include_adult",
                "schema": {
                    "type": "boolean",
                    "default": false
                },
                "description": "Choose whether to inlcude adult (pornography) content in the results."
            },
            {
                "name": "first_air_date_year",
                "schema": {
                    "type": "integer"
                },
                "description": "The first air data year."
            }
        ],
        "example": {
            "User Query": "I'm looking for TV shows that have the word 'Dragon' in their title. Can you help me find some?",
            "url": "http://api.themoviedb.org/3/search/tv",
            "Parameters": {
                "query": "Dragon"
            }
        }
    },
    "8": {
        "ID": 8,
        "tool_name": "GET_tv_tv_id_season_season_number_episode_episode_number",
        "description": "This API retrieves detailed information about a specific TV episode using the TV show ID, season number, and episode number as parameters. It returns comprehensive episode details including the air date, crew and guest star information, episode name, overview, production code, runtime, still image path, vote average, and vote count. The API handles errors by returning specific status codes: status code 34 indicates that the resource could not be found, while status code 6 indicates an invalid ID.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I heard there's a special episode 0 in season 1 of the TV show with ID 98765. Can you find the details for that episode?",
            "url": "http://api.themoviedb.org/3/tv/98765/season/1/episode/0",
            "Parameters": {}
        }
    },
    "9": {
        "ID": 9,
        "tool_name": "GET_network_network_id_images",
        "description": "This API retrieves logos for a specified TV network using its network ID. The response includes a list of logos with details such as aspect ratio, file path, dimensions, file type (PNG or SVG), and voting information (vote average and vote count). Note that the response may contain an empty list if no logos are available for the given network ID. SVG logos are resolution independent and can be scaled without loss of quality. This information can be used to access and utilize the logos, for example, by selecting logos with a high vote average. However, the API does not provide information on the last update date of the logos.",
        "url": "http://api.themoviedb.org/3/network/{network_id}/images",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you tell me if there are any logos for the TV network with ID 789 that have been updated recently, and provide details on their dimensions and file types?",
            "url": "http://api.themoviedb.org/3/network/789/images",
            "Parameters": {}
        }
    },
    "10": {
        "ID": 10,
        "tool_name": "GET_genre_tv_list",
        "description": "Retrieve the official list of TV show genres from The Movie Database (TMDb). This tool provides a JSON object containing an array of genre objects, each with an 'id' and a 'name'. It is specifically designed for TV show genres and does not require any input parameters.",
        "url": "http://api.themoviedb.org/3/genre/tv/list",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I'm developing an app that categorizes TV shows by genre. Can you provide me with the official list of TV show genres and their corresponding IDs from The Movie Database?",
            "url": "http://api.themoviedb.org/3/genre/tv/list",
            "Parameters": {}
        }
    },
    "11": {
        "ID": 11,
        "tool_name": "GET_search_movie",
        "description": "The 'GET_search_movie' API allows users to search for movies by providing a text query. It returns a list of movies that match the search criteria, along with detailed information about each movie. This includes attributes such as 'adult' (indicating if the movie contains adult content), 'backdrop_path' (URL path for the movie's backdrop image), 'genre_ids' (list of genre identifiers), 'id' (unique movie identifier), 'original_language', 'original_title', 'overview' (a brief description of the movie), 'popularity', 'poster_path' (URL path for the movie's poster image), 'release_date', 'title', 'video' (indicating if the movie is a video), 'vote_average', and 'vote_count'. The API supports pagination through the 'page' parameter and allows filtering of adult content using the 'include_adult' parameter. Additionally, the 'region', 'year', and 'primary_release_year' parameters can be used to refine search results based on release dates and regions. However, it is important to note that the 'region' and 'year' parameters alone do not yield results without a valid text query. Ensure to provide a valid query to retrieve results.",
        "url": "http://api.themoviedb.org/3/search/movie",
        "required_parameters": [
            {
                "name": "query",
                "schema": {
                    "type": "string"
                },
                "description": "Pass a text query to search. This value should be URI encoded."
            }
        ],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            },
            {
                "name": "include_adult",
                "schema": {
                    "type": "boolean",
                    "default": false
                },
                "description": "Choose whether to inlcude adult (pornography) content in the results."
            },
            {
                "name": "region",
                "schema": {
                    "type": "string"
                },
                "description": "Specify a ISO 3166-1 code to filter release dates. Must be uppercase."
            },
            {
                "name": "year",
                "schema": {
                    "type": "integer"
                },
                "description": "The year."
            },
            {
                "name": "primary_release_year",
                "schema": {
                    "type": "integer"
                },
                "description": "the primary release year"
            }
        ],
        "example": {
            "User Query": "Can you find movies that were released in France in 2015?",
            "url": "http://api.themoviedb.org/3/search/movie",
            "Parameters": {
                "query": "",
                "region": "FR",
                "year": 2015
            }
        }
    },
    "12": {
        "ID": 12,
        "tool_name": "GET_discover_movie",
        "description": "Discover movies using a variety of filters such as average rating, number of votes, genres, certifications, and runtime. The API allows sorting by criteria like popularity, release date, and revenue. Note that the 'primary_release_year' and 'release_date' filters may include movies with future release dates. Use 'sort_by' to order results, such as 'vote_average.desc' for top-rated movies. The 'with_genres' parameter requires genre IDs, which can be found separately. Certification filters require specifying 'certification_country'. The API supports filtering by region using 'region', and allows combining filters with comma (AND) or pipe (OR) separators. Additionally, filter movies by runtime using 'with_runtime.gte' and 'with_runtime.lte', and find movies available on specific platforms in certain regions using 'with_watch_providers' and 'watch_region'.",
        "url": "http://api.themoviedb.org/3/discover/movie",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "region",
                "schema": {
                    "type": "string"
                },
                "description": "Specify a ISO 3166-1 code to filter release dates. Must be uppercase."
            },
            {
                "name": "sort_by",
                "schema": {
                    "type": "string",
                    "enum": [
                        "",
                        "popularity.asc",
                        "popularity.desc",
                        "release_date.asc",
                        "release_date.desc",
                        "revenue.asc",
                        "revenue.desc",
                        "primary_release_date.asc",
                        "primary_release_date.desc",
                        "original_title.asc",
                        "original_title.desc",
                        "vote_average.asc",
                        "vote_average.desc",
                        "vote_count.asc",
                        "vote_count.desc"
                    ],
                    "default": "popularity.desc"
                },
                "description": "Choose from one of the many available sort options."
            },
            {
                "name": "certification_country",
                "schema": {
                    "type": "string"
                },
                "description": "Used in conjunction with the certification filter, use this to specify a country with a valid certification."
            },
            {
                "name": "certification",
                "schema": {
                    "type": "string"
                },
                "description": "Filter results with a valid certification from the 'certification_country' field."
            },
            {
                "name": "certification.lte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include movies that have a certification that is less than or equal to the specified value."
            },
            {
                "name": "certification.gte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include movies that have a certification that is greater than or equal to the specified value."
            },
            {
                "name": "include_adult",
                "schema": {
                    "type": "boolean",
                    "default": false
                },
                "description": "A filter and include or exclude adult movies."
            },
            {
                "name": "include_video",
                "schema": {
                    "type": "boolean",
                    "default": false
                },
                "description": "A filter to include or exclude videos."
            },
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify the page of results to query."
            },
            {
                "name": "primary_release_year",
                "schema": {
                    "type": "integer"
                },
                "description": "A filter to limit the results to a specific primary release year."
            },
            {
                "name": "primary_release_date.gte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include movies that have a primary release date that is greater or equal to the specified value."
            },
            {
                "name": "primary_release_date.lte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include movies that have a primary release date that is less than or equal to the specified value."
            },
            {
                "name": "release_date.gte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include movies that have a release date (looking at all release dates) that is greater or equal to the specified value."
            },
            {
                "name": "release_date.lte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include movies that have a release date (looking at all release dates) that is less than or equal to the specified value."
            },
            {
                "name": "with_release_type",
                "schema": {
                    "type": "integer"
                },
                "description": "Specify a comma (AND) or pipe (OR) separated value to filter release types by. These release types map to the same values found on the movie release date method."
            },
            {
                "name": "year",
                "schema": {
                    "type": "integer"
                },
                "description": "A filter to limit the results to a specific year (looking at all release dates)."
            },
            {
                "name": "vote_count.gte",
                "schema": {
                    "type": "integer"
                },
                "description": "Filter and only include movies that have a vote count that is greater or equal to the specified value."
            },
            {
                "name": "vote_count.lte",
                "schema": {
                    "type": "integer"
                },
                "description": "Filter and only include movies that have a vote count that is less than or equal to the specified value."
            },
            {
                "name": "vote_average.gte",
                "schema": {
                    "type": "number"
                },
                "description": "Filter and only include movies that have a rating that is greater or equal to the specified value."
            },
            {
                "name": "vote_average.lte",
                "schema": {
                    "type": "number"
                },
                "description": "Filter and only include movies that have a rating that is less than or equal to the specified value."
            },
            {
                "name": "with_cast",
                "schema": {
                    "type": "string"
                },
                "description": "A comma separated list of person ID's. Only include movies that have one of the ID's added as an actor."
            },
            {
                "name": "with_crew",
                "schema": {
                    "type": "string"
                },
                "description": "A comma separated list of person ID's. Only include movies that have one of the ID's added as a crew member."
            },
            {
                "name": "with_people",
                "schema": {
                    "type": "string"
                },
                "description": "A comma separated list of person ID's. Only include movies that have one of the ID's added as a either a actor or a crew member."
            },
            {
                "name": "with_companies",
                "schema": {
                    "type": "string"
                },
                "description": "A comma separated list of production company ID's. Only include movies that have one of the ID's added as a production company."
            },
            {
                "name": "with_genres",
                "schema": {
                    "type": "string"
                },
                "description": "Comma separated value of genre ids that you want to include in the results."
            },
            {
                "name": "without_genres",
                "schema": {
                    "type": "string"
                },
                "description": "Comma separated value of genre ids that you want to exclude from the results."
            },
            {
                "name": "with_keywords",
                "schema": {
                    "type": "string"
                },
                "description": "A comma separated list of keyword ID's. Only includes movies that have one of the ID's added as a keyword."
            },
            {
                "name": "without_keywords",
                "schema": {
                    "type": "string"
                },
                "description": "Exclude items with certain keywords. You can comma and pipe seperate these values to create an 'AND' or 'OR' logic."
            },
            {
                "name": "with_runtime.gte",
                "schema": {
                    "type": "integer"
                },
                "description": "Filter and only include movies that have a runtime that is greater or equal to a value."
            },
            {
                "name": "with_runtime.lte",
                "schema": {
                    "type": "integer"
                },
                "description": "Filter and only include movies that have a runtime that is less than or equal to a value."
            },
            {
                "name": "with_original_language",
                "schema": {
                    "type": "string"
                },
                "description": "Specify an ISO 639-1 string to filter results by their original language value."
            },
            {
                "name": "with_watch_providers",
                "schema": {
                    "type": "string"
                },
                "description": "A comma or pipe separated list of watch provider ID's. Combine this filter with `watch_region` in order to filter your results by a specific watch provider in a specific region."
            },
            {
                "name": "watch_region",
                "schema": {
                    "type": "string"
                },
                "description": "An ISO 3166-1 code. Combine this filter with `with_watch_providers` in order to filter your results by a specific watch provider in a specific region."
            },
            {
                "name": "with_watch_monetization_types",
                "schema": {
                    "type": "string",
                    "enum": [
                        "flatrate",
                        "free",
                        "ads",
                        "rent",
                        "buy"
                    ]
                },
                "description": "In combination with `watch_region`, you can filter by monetization type."
            },
            {
                "name": "without_companies",
                "schema": {
                    "type": "string"
                },
                "description": "Filter the results to exclude the specific production companies you specify here. `AND` / `OR` filters are supported."
            }
        ],
        "example": {
            "User Query": "Can you find movies available on Netflix in the United States with a runtime of at least 120 minutes?",
            "url": "http://api.themoviedb.org/3/discover/movie",
            "Parameters": {
                "with_watch_providers": "8",
                "watch_region": "US",
                "with_runtime.gte": 120
            }
        }
    },
    "13": {
        "ID": 13,
        "tool_name": "GET_movie_upcoming",
        "description": "This API provides a detailed list of upcoming movies in theaters, including information such as movie titles, release dates, overviews, genres, and popularity metrics. Users can filter results by country using the 'region' parameter with ISO 3166-1 codes and navigate through multiple pages of results using the 'page' parameter. The API response includes metadata about the date range of the upcoming movies, total number of pages, and total results available. Additionally, it provides information on each movie's language, vote average, and vote count, which can help assess the movie's reception. The tool also provides the maximum and minimum dates for the upcoming movies in the current query, which can help users understand the timeframe of the releases. Note that the API may return movies with both upcoming and past release dates, so users should verify the release dates for accuracy.",
        "url": "http://api.themoviedb.org/3/movie/upcoming",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            },
            {
                "name": "region",
                "schema": {
                    "type": "string"
                },
                "description": "Specify a ISO 3166-1 code to filter release dates. Must be uppercase."
            }
        ],
        "example": {
            "User Query": "What upcoming movies are set to release soon in Japan? Please provide the list of movies on the third page of results.",
            "url": "http://api.themoviedb.org/3/movie/upcoming",
            "Parameters": {
                "region": "JP",
                "page": 3
            }
        }
    },
    "14": {
        "ID": 14,
        "tool_name": "GET_credit_credit_id",
        "description": "The 'GET_credit_credit_id' API retrieves detailed information about a movie or TV credit using a specific credit ID. If the credit ID is valid, the API returns comprehensive details about the credit. If the credit ID is invalid or does not exist, the API responds with an error message: 'success': False, 'status_code': 34, and 'status_message': 'The resource you requested could not be found.' This error handling mechanism helps users verify the correctness of the credit ID and diagnose issues. Note that negative numbers or non-existent IDs will trigger this error response.",
        "url": "http://api.themoviedb.org/3/credit/{credit_id}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I'm curious about what happens if I request details for a movie or TV credit using a negative number as the credit ID, like -12345.",
            "url": "http://api.themoviedb.org/3/credit/-12345",
            "Parameters": {}
        }
    },
    "15": {
        "ID": 15,
        "tool_name": "GET_person_person_id_tv_credits",
        "description": "This API retrieves TV show credits for a person using their unique 'person_id'. It returns two main categories of credits: 'cast' and 'crew'. Each credit includes details such as the TV show's name, first air date, overview, popularity, and the person's role (e.g., Director). The 'crew' category provides additional information like department, job, and episode count. A valid 'person_id' is required, and if an invalid or non-existent 'person_id' is provided, the API will return an error message. The tool does not require any additional parameters. Ensure that the 'person_id' is correctly formatted and exists in the database to avoid errors. Additional details about the TV show credits can be queried using the credit method.",
        "url": "http://api.themoviedb.org/3/person/{person_id}/tv_credits",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you provide the TV show credits for the person with ID 12345?",
            "url": "http://api.themoviedb.org/3/person/12345/tv_credits",
            "Parameters": {}
        }
    },
    "16": {
        "ID": 16,
        "tool_name": "GET_tv_latest",
        "description": "Retrieve live, comprehensive details about the most recently created TV show, including its name, air dates, episodes, production status, genres, networks, production companies, and countries. The tool also provides information on the latest and upcoming episodes, as well as metadata like popularity and vote statistics. Note that some fields may be empty if the information is not available at the time of the query.",
        "url": "http://api.themoviedb.org/3/tv/latest",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you provide details about the production companies and countries involved in the most recently created TV show?",
            "url": "http://api.themoviedb.org/3/tv/latest",
            "Parameters": {}
        }
    },
    "17": {
        "ID": 17,
        "tool_name": "GET_company_company_id",
        "description": "This API retrieves detailed information about a company using its ID. The information includes the company's name, headquarters location, homepage URL, logo path, origin country, and parent company details. If any of these details are unavailable, the API will return an empty string or null for those fields. Additionally, if the company ID does not exist or is invalid, the API will return an error message indicating that the resource could not be found. This tool is useful for obtaining a comprehensive profile of a company, though some fields may occasionally be empty or null if the information is not available.",
        "url": "http://api.themoviedb.org/3/company/{company_id}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Could you provide information about the company with ID 24680, particularly focusing on its logo and whether it has any missing data fields?",
            "url": "http://api.themoviedb.org/3/company/24680",
            "Parameters": {}
        }
    },
    "18": {
        "ID": 18,
        "tool_name": "GET_tv_tv_id_images",
        "description": "This API retrieves images related to a specific TV show, categorized into 'backdrops', 'logos', and 'posters'. Each image includes metadata such as 'aspect_ratio', 'height', 'width', 'iso_639_1' (language code), 'file_path', 'vote_average', and 'vote_count'. The 'language' parameter filters images by the specified language code. The 'include_image_language' parameter specifies fallback languages in a comma-separated list, including 'null' to include images without a language code. If no images are found for the specified languages, the response will include empty lists for each category.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/images",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I'm interested in the images for the TV show with ID 24680. Can you provide images in Italian, and if not available, fallback to Portuguese and images without a language code?",
            "url": "http://api.themoviedb.org/3/tv/24680/images",
            "Parameters": {
                "language": "it",
                "include_image_language": "it,pt,null"
            }
        }
    },
    "19": {
        "ID": 19,
        "tool_name": "GET_tv_tv_id_season_season_number_credits",
        "description": "This API retrieves the cast and crew credits for a specific season of a TV show using the TV show ID and season number. The response includes detailed information about each cast and crew member, such as their name, character played, gender, popularity, and profile image path. If the requested resource is not found, the API returns an error message with a status code and message indicating the issue, which may occur if the TV show ID or season number is invalid or not available.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you find out who was involved in the production of the fifth season of the TV show with ID 11223?",
            "url": "http://api.themoviedb.org/3/tv/11223/season/5/credits",
            "Parameters": {}
        }
    },
    "20": {
        "ID": 20,
        "tool_name": "GET_movie_now_playing",
        "description": "This API provides a detailed list of movies currently playing in theaters worldwide. Each movie entry includes information such as title, release date, overview, genres, popularity, and ratings. Users can filter the results by specifying a 'region' parameter using ISO 3166-1 country codes to view movies playing in a specific country. The API supports pagination, allowing users to navigate through multiple pages of results. The 'dates' field in the response indicates the range of release dates for the movies listed. This tool is ideal for discovering current theatrical releases in various regions.",
        "url": "http://api.themoviedb.org/3/movie/now_playing",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            },
            {
                "name": "region",
                "schema": {
                    "type": "string"
                },
                "description": "Specify a ISO 3166-1 code to filter release dates. Must be uppercase."
            }
        ],
        "example": {
            "User Query": "What movies are currently playing in theaters in France, and can you show me the second page of results?",
            "url": "http://api.themoviedb.org/3/movie/now_playing",
            "Parameters": {
                "region": "FR",
                "page": 2
            }
        }
    },
    "21": {
        "ID": 21,
        "tool_name": "GET_review_review_id",
        "description": "This API retrieves the details of a movie review using a specified review ID included in the URL. If the review ID is invalid or not found, the API will return an error response with a 'success' field set to false, along with a 'status_code' and 'status_message' explaining the issue. No additional parameters are required besides the review ID in the URL. Ensure the review ID is correct to successfully obtain the review details.",
        "url": "http://api.themoviedb.org/3/review/{review_id}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I found a review with the ID 67890, can you fetch the details for me?",
            "url": "http://api.themoviedb.org/3/review/67890",
            "Parameters": {}
        }
    },
    "22": {
        "ID": 22,
        "tool_name": "GET_tv_on_the_air",
        "description": "The API provides a list of TV shows with episodes airing within the next 7 days. Each show entry includes detailed information such as the show's name, original language, origin country, genre, popularity, vote average, vote count, and a brief overview. The results are paginated, allowing users to specify a page number to access different sets of results. The 'page' parameter is optional and defaults to 1 if not specified. Additionally, the response includes metadata such as the total number of pages and total results available, helping users discover new and ongoing TV shows across various genres and countries. The API does not filter shows based on popularity or ratings, so users need to manually assess these attributes from the provided data.",
        "url": "http://api.themoviedb.org/3/tv/on_the_air",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "What are the most popular TV shows airing this week that have a high rating?",
            "url": "http://api.themoviedb.org/3/tv/on_the_air",
            "Parameters": {}
        }
    },
    "23": {
        "ID": 23,
        "tool_name": "GET_movie_movie_id",
        "description": "This API retrieves comprehensive details about a movie using its ID. It provides metadata such as the title, genres, release date, and original language, as well as financial information like budget and revenue. The API also includes additional data fields such as adult content flag, backdrop and poster paths, IMDb ID, production companies and countries, runtime, spoken languages, status, tagline, popularity score, vote average, and vote count. The 'append_to_response' parameter allows for the inclusion of extended data like keywords, credits, reviews, and similar movies. If the requested movie ID does not exist, the API will return an error with a 'success': False response and a specific status code and message.",
        "url": "http://api.themoviedb.org/3/movie/{movie_id}",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "append_to_response",
                "schema": {
                    "type": "string"
                },
                "description": "Append requests within the same namespace to the response."
            }
        ],
        "example": {
            "User Query": "Can you provide the financial details and keywords for the movie with ID 67890?",
            "url": "http://api.themoviedb.org/3/movie/67890",
            "Parameters": {
                "append_to_response": "keywords"
            }
        }
    },
    "24": {
        "ID": 24,
        "tool_name": "GET_tv_tv_id_season_season_number_images",
        "description": "This API retrieves images associated with a specific season of a TV show. The required parameters are 'tv_id' and 'season_number', which identify the TV show and its season. Optional parameters include 'language', which filters images by language, and 'include_image_language', which allows specifying fallback languages in a comma-separated format (e.g., 'include_image_language=en,null'). The API response includes an 'id' for the season and an array of 'posters', which may be empty if no images are available for the specified season. Additionally, the response contains a 'success' field indicating whether the request was successful, and a 'status_message' providing additional context in case of errors, such as a 'resource not found' error indicated by status code 34. If the specified TV show or season does not exist, the API will return a 'success' field set to false and a 'status_message' explaining the error.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Could you find out if there are any images available for the tenth season of the TV show with ID 99999, and let me know what happens if there are no images?",
            "url": "http://api.themoviedb.org/3/tv/99999/season/10/images",
            "Parameters": {}
        }
    },
    "25": {
        "ID": 25,
        "tool_name": "GET_company_company_id_images",
        "description": "This API retrieves the logos of a company using its ID. Logos are available in two formats: PNG and SVG, with SVGs preferred for their scalability. If no logos are available for the specified company ID, the API returns an empty list. If the company ID is invalid, the API returns an error with a status code of 34 and a message indicating 'The resource you requested could not be found.' The company ID is the only required parameter and is included in the URL. The API documentation does not specify if authentication is required or if there are any rate limits. A successful response includes details about the logos, such as file type and dimensions.",
        "url": "http://api.themoviedb.org/3/company/{company_id}/images",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you find out if there are any SVG logos available for the company with ID 24680, and let me know if the API requires any authentication or has rate limits?",
            "url": "http://api.themoviedb.org/3/company/24680/images",
            "Parameters": {}
        }
    },
    "26": {
        "ID": 26,
        "tool_name": "GET_tv_tv_id_reviews",
        "description": "This API retrieves reviews for a specific TV show using the required 'tv_id' parameter. The response includes a paginated list of reviews, with an optional 'page' parameter that defaults to 1 if not specified, allowing users to navigate through multiple pages of reviews. The API response contains the TV show's 'id', the current 'page' number, an array of 'results' with the reviews, and metadata such as 'total_pages' and 'total_results'. If no reviews are available, the 'results' array will be empty, and both 'total_pages' and 'total_results' will be zero.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/reviews",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "Can you provide me with the reviews for the TV show with ID 24680, and let me know how many pages of reviews are available?",
            "url": "http://api.themoviedb.org/3/tv/24680/reviews",
            "Parameters": {}
        }
    },
    "27": {
        "ID": 27,
        "tool_name": "GET_tv_tv_id_similar",
        "description": "This tool retrieves a list of TV shows similar to a specified TV show, identified by its ID. Similarity is determined by matching keywords and genres. The response includes pagination details: 'page', 'total_pages', and 'total_results', which indicate the current page of results, the total number of pages available, and the total number of similar shows found, respectively. The 'page' parameter can be used to navigate through multiple pages of results if available. Each similar show in the response includes comprehensive details such as 'id', 'name', 'overview', 'popularity', 'vote_average', 'vote_count', 'genre_ids', 'origin_country', 'original_language', 'original_name', 'first_air_date', 'poster_path', and 'backdrop_path'. If no similar shows are found, the results may be empty.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/similar",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "I watched a TV show with the ID 13579. Could you tell me if there are any similar shows and how many pages of results there are?",
            "url": "http://api.themoviedb.org/3/tv/13579/similar",
            "Parameters": {}
        }
    },
    "28": {
        "ID": 28,
        "tool_name": "GET_network_network_id",
        "description": "This API retrieves detailed information about a specific network using its network ID. It provides details such as the network's headquarters, homepage, ID, logo path, name, and origin country. If the network ID is invalid or does not exist, the API will return an error message with a status code and message indicating that the resource could not be found. The network ID is a required parameter for accessing these details. Ensure to handle potential errors gracefully by checking the 'success' field in the response.",
        "url": "http://api.themoviedb.org/3/network/{network_id}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Could you provide information about the network with ID 7890, such as its headquarters and origin country?",
            "url": "http://api.themoviedb.org/3/network/7890",
            "Parameters": {}
        }
    },
    "29": {
        "ID": 29,
        "tool_name": "GET_tv_tv_id_recommendations",
        "description": "This API provides recommendations for TV shows based on a specified TV show ID. The 'tv_id' parameter is mandatory and must be a valid ID to retrieve recommendations. The API supports pagination through the optional 'page' parameter, which defaults to 1 if not specified. The response includes detailed information about each recommended show, such as name, overview, genre, popularity, first air date, vote average, and origin country. If an invalid TV show ID is provided, the API will return an error message.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/recommendations",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "I just finished watching 'The Crown'. Can you recommend some similar TV shows?",
            "url": "http://api.themoviedb.org/3/tv/12345/recommendations",
            "Parameters": {}
        }
    },
    "30": {
        "ID": 30,
        "tool_name": "GET_tv_tv_id_season_season_number_episode_episode_number_images",
        "description": "This API retrieves images associated with a specific TV episode using the TV show's ID, season number, and episode number. The response includes an 'id' for the episode and a list of 'stills', which are the images related to the episode. The 'stills' list may be empty if no images are available. Optional parameters include 'language' to filter images by a specific language, and 'include_image_language' to specify fallback languages in a comma-separated format, such as 'include_image_language=en,null'. This allows for more flexible image retrieval by including images in multiple languages if available. If the requested resource is not found, the API will return an error message with a status code and message indicating the issue.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I would like to see the images from the finale episode of season 5 of the TV show with ID 24680, and please include images in Japanese and Korean if they are available.",
            "url": "http://api.themoviedb.org/3/tv/24680/season/5/episode/10/images",
            "Parameters": {
                "include_image_language": "ja,ko"
            }
        }
    },
    "31": {
        "ID": 31,
        "tool_name": "GET_movie_popular",
        "description": "The 'GET_movie_popular' API provides a daily updated list of currently popular movies on TMDb. Each movie entry includes detailed information such as the title, release date, genre, popularity score, overview, poster path, and vote statistics. The API supports pagination through the 'page' parameter, allowing users to navigate through multiple pages of results, with the default being the first page. Additionally, the 'region' parameter can be used to filter movies based on their release dates in a specific country, using an ISO 3166-1 code. The API response includes metadata like total pages and total results, offering a comprehensive overview of the available data. This API is particularly useful for retrieving trending movies either globally or within specific countries, emphasizing its ability to filter by region and the comprehensive nature of the data returned.",
        "url": "http://api.themoviedb.org/3/movie/popular",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            },
            {
                "name": "region",
                "schema": {
                    "type": "string"
                },
                "description": "Specify a ISO 3166-1 code to filter release dates. Must be uppercase."
            }
        ],
        "example": {
            "User Query": "Can you show me the popular movies currently trending in Brazil?",
            "url": "http://api.themoviedb.org/3/movie/popular",
            "Parameters": {
                "region": "BR"
            }
        }
    },
    "32": {
        "ID": 32,
        "tool_name": "GET_tv_airing_today",
        "description": "The API provides a list of TV shows airing today, without specific airing times. The default timezone for determining 'today' is EST (Eastern Time UTC-05:00), and the API does not currently support specifying a different timezone directly in the request. The response includes details such as the show's name, original language, overview, popularity, vote average, and more. The API supports pagination, allowing navigation through multiple pages of results using the 'page' parameter. Additionally, the response includes metadata such as total pages and total results, which helps in understanding the scope of available data.",
        "url": "http://api.themoviedb.org/3/tv/airing_today",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "Can you show me the TV shows airing today in Tokyo's timezone?",
            "url": "http://api.themoviedb.org/3/tv/airing_today",
            "Parameters": {}
        }
    },
    "33": {
        "ID": 33,
        "tool_name": "GET_tv_tv_id_keywords",
        "description": "This API retrieves keywords associated with a specific TV show by using its TV show ID. The response includes an 'id' field representing the TV show ID and a 'results' field, which is an array of keyword objects. Each keyword object contains a 'name' and an 'id'. If the 'results' array is empty, it indicates that no keywords are associated with the TV show. If the TV show ID does not exist, the API will return an error response with a 'success' field set to false, a 'status_code' of 34, and a 'status_message' indicating that the resource could not be found.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/keywords",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you check the keywords for a TV show with the ID 13579? I'm curious to see if this show has any associated keywords or if it's an edge case with none.",
            "url": "http://api.themoviedb.org/3/tv/13579/keywords",
            "Parameters": {}
        }
    },
    "34": {
        "ID": 34,
        "tool_name": "GET_search_person",
        "description": "The 'GET_search_person' API allows you to search for people by name and returns a list of matching individuals. Each result includes detailed information such as the person's name, gender (1 for female, 2 for male, 0 for unspecified), known for department (e.g., Acting), popularity score, and a profile image path ('profile_path'). The response also includes a 'known_for' field, which lists movies or TV shows the person is known for, with details like title, overview, release date, and vote average. The 'include_adult' parameter can be used to include or exclude adult content in the results, and the 'adult' field in the response indicates if the person is associated with adult content. The API supports pagination through the 'page' parameter. Additionally, the 'media_type' field in the 'known_for' section specifies whether the entry is a movie or a TV show. The 'region' parameter is optional but does not appear to affect the results, so its functionality may be limited or unimplemented.",
        "url": "http://api.themoviedb.org/3/search/person",
        "required_parameters": [
            {
                "name": "query",
                "schema": {
                    "type": "string"
                },
                "description": "Pass a text query to search. This value should be URI encoded."
            }
        ],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            },
            {
                "name": "include_adult",
                "schema": {
                    "type": "boolean",
                    "default": false
                },
                "description": "Choose whether to inlcude adult (pornography) content in the results."
            },
            {
                "name": "region",
                "schema": {
                    "type": "string"
                },
                "description": "Specify a ISO 3166-1 code to filter release dates. Must be uppercase."
            }
        ],
        "example": {
            "User Query": "Can you find information about a person named Michael Jordan, and specify the region as US?",
            "url": "http://api.themoviedb.org/3/search/person",
            "Parameters": {
                "query": "Michael Jordan",
                "region": "US"
            }
        }
    },
    "35": {
        "ID": 35,
        "tool_name": "GET_search_company",
        "description": "This API allows users to search for film production companies and related entities within the movie industry using The Movie Database (TMDb) API. Users can search for companies by name using the 'query' parameter, which must be a URI encoded string. The search results include details such as the company's ID, logo path, name, and origin country. Some fields like 'logo_path' and 'origin_country' may be empty if the information is not available. The 'page' parameter is optional and can be used to navigate through multiple pages of results if there are more than one. The API response includes pagination details like 'total_pages' and 'total_results', indicating the number of pages and total results found for the query. The search results may include companies with names that partially match the query string. Additionally, the results may include entities that are not strictly film production companies, such as music distribution companies or other related entities.",
        "url": "http://api.themoviedb.org/3/search/company",
        "required_parameters": [
            {
                "name": "query",
                "schema": {
                    "type": "string"
                },
                "description": "Pass a text query to search. This value should be URI encoded."
            }
        ],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "Can you find information about film production companies that have 'Universal' in their name?",
            "url": "http://api.themoviedb.org/3/search/company",
            "Parameters": {
                "query": "Universal"
            }
        }
    },
    "36": {
        "ID": 36,
        "tool_name": "GET_discover_tv",
        "description": "This API allows users to discover TV shows based on various criteria such as average rating, number of votes, genres, networks, and air dates. Users can sort results by popularity, average rating, or first air date, with popularity being the default. The 'first_air_date_year' parameter does not strictly limit results to shows aired in that year, as it may include shows with air dates outside the specified year, including future dates. The API supports filtering by original language using ISO 639-1 codes, but it does not strictly adhere to filters like 'vote_average.gte', as results may include shows with lower ratings. Additionally, the API may return results that do not strictly match the specified genre or network filters. The API does not support combining filters with 'AND'/'OR' logic using commas or pipes. Users should be aware of these limitations when using the API to refine search results.",
        "url": "http://api.themoviedb.org/3/discover/tv",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "sort_by",
                "schema": {
                    "type": "string",
                    "enum": [
                        "",
                        "vote_average.desc",
                        "vote_average.asc",
                        "first_air_date.desc",
                        "first_air_date.asc",
                        "popularity.desc",
                        "popularity.asc"
                    ],
                    "default": "popularity.desc"
                },
                "description": "Choose from one of the many available sort options."
            },
            {
                "name": "air_date.gte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include TV shows that have a air date (by looking at all episodes) that is greater or equal to the specified value."
            },
            {
                "name": "air_date.lte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include TV shows that have a air date (by looking at all episodes) that is less than or equal to the specified value."
            },
            {
                "name": "first_air_date.gte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include TV shows that have a original air date that is greater or equal to the specified value. Can be used in conjunction with the \"include_null_first_air_dates\" filter if you want to include items with no air date."
            },
            {
                "name": "first_air_date.lte",
                "schema": {
                    "type": "string"
                },
                "description": "Filter and only include TV shows that have a original air date that is less than or equal to the specified value. Can be used in conjunction with the \"include_null_first_air_dates\" filter if you want to include items with no air date."
            },
            {
                "name": "first_air_date_year",
                "schema": {
                    "type": "integer"
                },
                "description": "Filter and only include TV shows that have a original air date year that equal to the specified value. Can be used in conjunction with the \"include_null_first_air_dates\" filter if you want to include items with no air date."
            },
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify the page of results to query."
            },
            {
                "name": "timezone",
                "schema": {
                    "type": "string",
                    "default": "America/New_York"
                },
                "description": "Used in conjunction with the air_date.gte/lte filter to calculate the proper UTC offset."
            },
            {
                "name": "vote_average.gte",
                "schema": {
                    "type": "number"
                },
                "description": "Filter and only include movies that have a rating that is greater or equal to the specified value."
            },
            {
                "name": "vote_count.gte",
                "schema": {
                    "type": "integer"
                },
                "description": "Filter and only include movies that have a rating that is less than or equal to the specified value."
            },
            {
                "name": "with_genres",
                "schema": {
                    "type": "string"
                },
                "description": "Comma separated value of genre ids that you want to include in the results."
            },
            {
                "name": "with_networks",
                "schema": {
                    "type": "string"
                },
                "description": "Comma separated value of network ids that you want to include in the results."
            },
            {
                "name": "without_genres",
                "schema": {
                    "type": "string"
                },
                "description": "Comma separated value of genre ids that you want to exclude from the results."
            },
            {
                "name": "with_runtime.gte",
                "schema": {
                    "type": "integer"
                },
                "description": "Filter and only include TV shows with an episode runtime that is greater than or equal to a value."
            },
            {
                "name": "with_runtime.lte",
                "schema": {
                    "type": "integer"
                },
                "description": "Filter and only include TV shows with an episode runtime that is less than or equal to a value."
            },
            {
                "name": "include_null_first_air_dates",
                "schema": {
                    "type": "boolean",
                    "default": false
                },
                "description": "Use this filter to include TV shows that don't have an air date while using any of the \"first_air_date\" filters."
            },
            {
                "name": "with_original_language",
                "schema": {
                    "type": "string"
                },
                "description": "Specify an ISO 639-1 string to filter results by their original language value."
            },
            {
                "name": "without_keywords",
                "schema": {
                    "type": "string"
                },
                "description": "Exclude items with certain keywords. You can comma and pipe seperate these values to create an 'AND' or 'OR' logic."
            },
            {
                "name": "screened_theatrically",
                "schema": {
                    "type": "boolean"
                },
                "description": "Filter results to include items that have been screened theatrically."
            },
            {
                "name": "with_companies",
                "schema": {
                    "type": "string"
                },
                "description": "A comma separated list of production company ID's. Only include movies that have one of the ID's added as a production company."
            },
            {
                "name": "with_keywords",
                "schema": {
                    "type": "string"
                },
                "description": "A comma separated list of keyword ID's. Only includes TV shows that have one of the ID's added as a keyword."
            },
            {
                "name": "with_watch_providers",
                "schema": {
                    "type": "string"
                },
                "description": "A comma or pipe separated list of watch provider ID's. Combine this filter with `watch_region` in order to filter your results by a specific watch provider in a specific region."
            },
            {
                "name": "watch_region",
                "schema": {
                    "type": "string"
                },
                "description": "An ISO 3166-1 code. Combine this filter with `with_watch_providers` in order to filter your results by a specific watch provider in a specific region."
            },
            {
                "name": "with_watch_monetization_types",
                "schema": {
                    "type": "string",
                    "enum": [
                        "flatrate",
                        "free",
                        "ads",
                        "rent",
                        "buy"
                    ]
                },
                "description": "In combination with `watch_region`, you can filter by monetization type."
            },
            {
                "name": "with_status",
                "schema": {
                    "type": "string",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                "description": "Filter TV shows by their status.\n\nReturning Series: 0\nPlanned: 1\nIn Production: 2\nEnded: 3\nCancelled: 4\nPilot: 5"
            },
            {
                "name": "with_type",
                "schema": {
                    "type": "string",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                "description": "Filter TV shows by their type.\n\nDocumentary: 0\nNews: 1\nMiniseries: 2\nReality: 3\nScripted: 4\nTalk Show: 5\nVideo: 6"
            },
            {
                "name": "without_companies",
                "schema": {
                    "type": "string"
                },
                "description": "Filter the results to exclude the specific production companies you specify here. `AND` / `OR` filters are supported."
            }
        ],
        "example": {
            "User Query": "Can you find TV shows that are documentaries and were aired on Netflix, sorted by their first air date in ascending order?",
            "url": "http://api.themoviedb.org/3/discover/tv",
            "Parameters": {
                "with_genres": "99",
                "with_networks": "213",
                "sort_by": "first_air_date.asc"
            }
        }
    },
    "37": {
        "ID": 37,
        "tool_name": "GET_movie_top_rated",
        "description": "This API retrieves a list of top-rated movies from TMDb based on cumulative user ratings. It provides detailed information for each movie, including the title, original title, release date, overview, genres, popularity, vote average, and whether the movie is for adults. The results are paginated, allowing users to specify which page of results to retrieve using the 'page' parameter. The 'region' parameter filters movies based on their release dates in a specific country, using an ISO 3166-1 code, which may affect the list of top-rated movies shown. The API response includes metadata such as the current page number, total number of pages, and total results available, aiding in navigation through the paginated results.",
        "url": "http://api.themoviedb.org/3/movie/top_rated",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            },
            {
                "name": "region",
                "schema": {
                    "type": "string"
                },
                "description": "Specify a ISO 3166-1 code to filter release dates. Must be uppercase."
            }
        ],
        "example": {
            "User Query": "What are the top-rated movies in France on the second page of results?",
            "url": "http://api.themoviedb.org/3/movie/top_rated",
            "Parameters": {
                "page": 2,
                "region": "FR"
            }
        }
    },
    "38": {
        "ID": 38,
        "tool_name": "GET_movie_latest",
        "description": "Retrieve comprehensive details of the most recently added movie to the database. This includes metadata such as the title, overview, release status, runtime, genres, spoken languages, origin country, and other relevant details. Note that some fields, like production companies, production countries, release date, and others, may be empty if the information is unavailable. The tool provides a live response that updates as new movies are added to the database, ensuring the latest information is always accessible.",
        "url": "http://api.themoviedb.org/3/movie/latest",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you provide details on the spoken languages and origin country of the latest movie added to the database?",
            "url": "http://api.themoviedb.org/3/movie/latest",
            "Parameters": {}
        }
    },
    "39": {
        "ID": 39,
        "tool_name": "GET_tv_top_rated",
        "description": "This API provides a paginated list of top-rated TV shows from TMDb, sorted by their ratings. It returns detailed information about each show, including the show's name, overview, popularity, vote average, vote count, genre IDs, original language, origin country, first air date, and poster and backdrop paths. The 'origin_country' field indicates the country or countries where the show originated. The 'adult' field is a boolean indicating whether the show is intended for adult audiences. The API response also includes metadata such as the current page, total pages, and total results, which can be used to navigate through the paginated data. The 'page' parameter is optional and defaults to 1, allowing users to retrieve different pages of results. Users can manually filter results based on the 'original_language' and 'origin_country' fields provided in the response.",
        "url": "http://api.themoviedb.org/3/tv/top_rated",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "Can you give me a list of top-rated TV shows from countries other than the US?",
            "url": "http://api.themoviedb.org/3/tv/top_rated",
            "Parameters": {}
        }
    },
    "40": {
        "ID": 40,
        "tool_name": "GET_trending_media_type_time_window",
        "description": "This API provides access to trending items on a daily or weekly basis, including movies, TV shows, or people. The 'media_type' parameter is required and specifies the type of media: 'movie' for movies, 'tv' for TV shows, 'person' for people, or 'all' to include all types. The 'time_window' parameter is also required and can be set to 'day' for daily trends or 'week' for weekly trends. The API response includes a list of trending items with fields such as 'id', 'name', 'original_name', 'media_type', 'popularity', 'gender', 'known_for_department', 'profile_path', and 'known_for'. For each 'known_for' item, details like 'title', 'original_title', 'overview', 'poster_path', 'media_type', 'original_language', 'genre_ids', 'popularity', 'release_date', 'vote_average', and 'vote_count' are included. Pagination is supported, allowing navigation through results using the 'page' parameter, with 'total_pages' and 'total_results' indicating the number of pages and total results available. The API can filter content based on language preferences ('original_language') and content restrictions ('adult').",
        "url": "http://api.themoviedb.org/3/trending/{media_type}/{time_window}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Who are the trending people this week?",
            "url": "http://api.themoviedb.org/3/trending/person/week",
            "Parameters": {}
        }
    },
    "41": {
        "ID": 41,
        "tool_name": "GET_genre_movie_list",
        "description": "This API provides a comprehensive list of official movie genres from The Movie Database (TMDb). Each genre is represented by a unique identifier (ID) and a name. The API does not require any parameters to retrieve the list, making it straightforward to use. It is ideal for categorizing movies by genre and can be used to check for updates or additions to the genre list. The response includes a structured list of genres, ensuring easy integration into applications requiring genre classification.",
        "url": "http://api.themoviedb.org/3/genre/movie/list",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Are there any new movie genres that have been added recently to The Movie Database?",
            "url": "http://api.themoviedb.org/3/genre/movie/list",
            "Parameters": {}
        }
    },
    "42": {
        "ID": 42,
        "tool_name": "GET_tv_tv_id_season_season_number",
        "description": "This API retrieves detailed information about a specific TV season using the TV show's ID (`tv_id`) and the season number (`season_number`) as required parameters. The response includes comprehensive details such as the season's air date, a list of episodes with their respective details (episode number, name, overview, runtime), crew and guest stars involved, and overall season metadata like the season's name, overview, and vote average. The API supports the `append_to_response` parameter, which allows additional data to be included in the response, such as trailers, images, or similar shows, if available. The API response includes a success flag and status code to indicate whether the request was successful. If the requested resource does not exist, the API will return an error message indicating 'resource not found'.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "What can you tell me about the third season of the TV show with ID 54321, and could you include any trailers or images available?",
            "url": "http://api.themoviedb.org/3/tv/54321/season/3",
            "Parameters": {
                "append_to_response": "trailers,images"
            }
        }
    },
    "43": {
        "ID": 43,
        "tool_name": "GET_collection_collection_id",
        "description": "This API endpoint provides detailed information about a movie collection using its collection ID. Only a valid collection ID is required in the URL. In a successful response, the API returns a JSON object with the collection's name, overview, and a list of movies in the collection. If the collection ID is invalid or does not exist, the API returns an error with a 'success' field set to false, along with a 'status_code' and 'status_message'. A common error code is 34, indicating the resource could not be found.",
        "url": "http://api.themoviedb.org/3/collection/{collection_id}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I heard there's a movie collection related to superheroes. Can you find out what movies are in the collection with ID 13579?",
            "url": "http://api.themoviedb.org/3/collection/13579",
            "Parameters": {}
        }
    },
    "44": {
        "ID": 44,
        "tool_name": "GET_person_person_id_images",
        "description": "This API retrieves profile images of a person from The Movie Database (TMDb) using their person ID. The response includes metadata for each image, such as aspect ratio, dimensions (height and width), file path, and vote information. If the person ID is invalid or the person does not exist, the API will return an error message with a status code, status message, and a 'success' field indicating the failure of the request. No additional parameters are required or optional for this API call.",
        "url": "http://api.themoviedb.org/3/person/{person_id}/images",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I heard there's a person with ID 2147483647. Can you see if there are any profile images for them?",
            "url": "http://api.themoviedb.org/3/person/2147483647/images",
            "Parameters": {}
        }
    },
    "45": {
        "ID": 45,
        "tool_name": "GET_tv_tv_id",
        "description": "This API retrieves comprehensive details about a TV show using its ID. It returns a wide range of fields including 'adult', 'backdrop_path', 'created_by', 'episode_run_time', 'first_air_date', 'genres', 'homepage', 'id', 'in_production', 'languages', 'last_air_date', 'last_episode_to_air', 'name', 'next_episode_to_air', 'networks', 'number_of_episodes', 'number_of_seasons', 'origin_country', 'original_language', 'original_name', 'overview', 'popularity', 'poster_path', 'production_companies', 'production_countries', 'seasons', 'spoken_languages', 'status', 'tagline', 'type', 'vote_average', and 'vote_count'. Key features include the ability to fetch details about the show's genres, production status, networks, languages, number of seasons and episodes, and information about the latest and upcoming episodes. The 'seasons' field provides detailed information about each season, such as 'air_date', 'episode_count', 'id', 'name', 'overview', 'poster_path', 'season_number', and 'vote_average'. The API supports fetching additional details using the 'append_to_response' parameter. Note that some fields may return empty or null values if the information is not available.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Could you provide information on the TV show with ID 11223, especially focusing on the number of seasons and episodes, and details about the show's genres and spoken languages?",
            "url": "http://api.themoviedb.org/3/tv/11223",
            "Parameters": {}
        }
    },
    "46": {
        "ID": 46,
        "tool_name": "GET_person_popular",
        "description": "The API provides a daily updated list of popular individuals in the entertainment industry, such as actors and actresses. It returns detailed information for each person, including their name, gender, known for department, popularity score, and profile image. Additionally, it provides a list of notable works (movies or TV shows) with details like title, overview, release date, and vote average. The API supports pagination through an optional 'page' parameter, allowing users to access different pages of results. Each page contains a fixed number of results, and the API response includes the total number of pages and results available. Note that the API does not filter results by gender or any other criteria; it simply returns the most popular individuals based on current metrics. Example API call: `GET /3/person/popular?page=1`.",
        "url": "http://api.themoviedb.org/3/person/popular",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "Can you provide details about the most popular female celebrities currently, including their notable works?",
            "url": "http://api.themoviedb.org/3/person/popular",
            "Parameters": {}
        }
    },
    "47": {
        "ID": 47,
        "tool_name": "GET_collection_collection_id_images",
        "description": "This API retrieves images for a specific movie collection by using a valid collection ID. The collection ID must be included in the URL path. If the collection ID is invalid or does not match an existing collection, the API will return an error message with a status code and message indicating the issue. No additional parameters are required for this API. The response will provide details about the success or failure of the request, including status codes and messages for troubleshooting.",
        "url": "http://api.themoviedb.org/3/collection/{collection_id}/images",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you find the images from the Studio Ghibli movie collection?",
            "url": "http://api.themoviedb.org/3/collection/{collection_id}/images",
            "Parameters": {}
        }
    },
    "48": {
        "ID": 48,
        "tool_name": "GET_tv_tv_id_credits",
        "description": "This API retrieves detailed information about the cast and crew of a specific TV show using the TV show ID as an input parameter. It provides details such as names, roles, gender, popularity, and character names for cast members, and similar details for crew members if available. The response includes separate lists for cast and crew, which may be empty if no data is available for one of them. Note that the API does not handle localization or translation of names and roles, and the response may return empty lists if no credits are available for the given TV show ID.",
        "url": "http://api.themoviedb.org/3/tv/{tv_id}/credits",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Can you provide information about the cast and crew for the international TV show with ID 54321, especially focusing on any localization or translation of names and roles?",
            "url": "http://api.themoviedb.org/3/tv/54321/credits",
            "Parameters": {}
        }
    },
    "49": {
        "ID": 49,
        "tool_name": "GET_person_person_id_movie_credits",
        "description": "This API retrieves the movie credits for a person, divided into 'cast' and 'crew' categories. The 'cast' section lists movies where the person acted, providing details such as 'title', 'release_date', 'overview', 'genre_ids', 'popularity', 'vote_average', 'vote_count', 'character', and 'credit_id'. The 'crew' section lists movies where the person contributed in roles other than acting, with additional fields 'department' and 'job' specifying their role in the production. Each movie entry includes comprehensive details like 'title', 'release_date', 'overview', 'genre_ids', 'popularity', 'vote_average', and 'vote_count'. The API requires a 'person_id' to function and may return empty 'cast' or 'crew' lists if the person has no credits in those categories. This API provides detailed information about a person's involvement in movies, whether as an actor or in other production roles.",
        "url": "http://api.themoviedb.org/3/person/{person_id}/movie_credits",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "Could you find out if the person with ID 67890 has any movie credits, and if so, provide details about their roles?",
            "url": "http://api.themoviedb.org/3/person/67890/movie_credits",
            "Parameters": {}
        }
    },
    "50": {
        "ID": 50,
        "tool_name": "GET_movie_movie_id_recommendations",
        "description": "The API provides movie recommendations based on a specific movie, identified by its movie ID. It returns detailed information about each recommended movie, including the title, overview, release date, genres, popularity, media type, language, and more. The results are paginated, allowing users to specify which page of recommendations to view using the 'page' parameter. This tool is designed to help users discover movies that are similar in theme, style, or audience appeal to the one they are interested in. It is particularly useful for finding movies within the same genre or with similar audience appeal.",
        "url": "http://api.themoviedb.org/3/movie/{movie_id}/recommendations",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "I recently watched 'Frozen' and loved it! Can you recommend some similar animated movies for my kids to enjoy?",
            "url": "http://api.themoviedb.org/3/movie/109445/recommendations",
            "Parameters": {}
        }
    },
    "51": {
        "ID": 51,
        "tool_name": "GET_search_collection",
        "description": "The 'GET_search_collection' API allows users to search for movie collections using a text query. The search is case-insensitive and returns metadata such as the number of pages, total results, and a list of matching collections. Each collection in the results includes details like the collection's name, overview, language, and associated images (backdrop and poster paths). If no collections match the query, the results list will be empty. The API supports pagination through an optional 'page' parameter. Note that the API searches for collections, not individual movies or directors, so queries related to specific directors or non-collection entities may return no results.",
        "url": "http://api.themoviedb.org/3/search/collection",
        "required_parameters": [
            {
                "name": "query",
                "schema": {
                    "type": "string"
                },
                "description": "Pass a text query to search. This value should be URI encoded."
            }
        ],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "Are there any collections of movies that are part of the James Bond series?",
            "url": "http://api.themoviedb.org/3/search/collection",
            "Parameters": {
                "query": "James Bond"
            }
        }
    },
    "52": {
        "ID": 52,
        "tool_name": "GET_movie_movie_id_credits",
        "description": "This API retrieves detailed information about the cast and crew for a specific movie using a valid 'movie_id'. It returns a structured response containing lists of cast and crew members, including details such as name, role, department, and popularity. The response also includes additional details like profile paths and character names for cast members, and job titles for crew members. If the movie ID is invalid or the resource is not found, the API provides an error message with a status code and a status message indicating the issue. Ensure the 'movie_id' is correct to avoid errors.",
        "url": "http://api.themoviedb.org/3/movie/{movie_id}/credits",
        "required_parameters": [],
        "optional_parameters": [],
        "example": {
            "User Query": "I heard there's a movie with ID 13579 that has a huge cast. Can you tell me more about the people involved in it?",
            "url": "http://api.themoviedb.org/3/movie/13579/credits",
            "Parameters": {}
        }
    },
    "53": {
        "ID": 53,
        "tool_name": "GET_movie_movie_id_similar",
        "description": "This API retrieves a list of movies similar to a specified movie by analyzing shared keywords and genres. It requires a 'movie_id' to identify the movie of interest. The response includes detailed information about each similar movie, such as title, release date, genres, overview, popularity, and user ratings. The tool provides a general list based on shared attributes, not personalized recommendations. Pagination is supported through an optional 'page' parameter to access multiple pages of results. Ensure to handle cases where some movie details, like 'poster_path' or 'release_date', might be missing.",
        "url": "http://api.themoviedb.org/3/movie/{movie_id}/similar",
        "required_parameters": [],
        "optional_parameters": [
            {
                "name": "page",
                "schema": {
                    "type": "integer",
                    "default": 1
                },
                "description": "Specify which page to query."
            }
        ],
        "example": {
            "User Query": "What are some movies similar to 'Mad Max: Fury Road'?",
            "url": "http://api.themoviedb.org/3/movie/76341/similar",
            "Parameters": {}
        }
    }
}
